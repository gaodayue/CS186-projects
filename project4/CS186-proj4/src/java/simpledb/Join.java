package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate _predicate;
    private DbIterator _outerChild;
    private DbIterator _innerChild;

    private TupleDesc _cachedTd;    // avoid recompute merged schema over and over again
    private Tuple _outerTuple;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        _predicate = p;
        _outerChild = child1;
        _innerChild = child2;
    }

    public JoinPredicate getJoinPredicate() {
        return _predicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return _outerChild.getTupleDesc().getFieldName(_predicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        return _innerChild.getTupleDesc().getFieldName(_predicate.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(_outerChild.getTupleDesc(),
                               _innerChild.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        _outerChild.open();
        _innerChild.open();
        _cachedTd = getTupleDesc();
    }

    public void close() {
        super.close();
        _outerChild.close();
        _innerChild.close();
        _cachedTd = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        super.rewind();
        _outerChild.rewind();
        _innerChild.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // implementation of nested-loop join
        while (true) {

            if (_outerTuple == null) {
                if (_outerChild.hasNext())
                    _outerTuple = _outerChild.next();
                else
                    return null;
            }


            while (_innerChild.hasNext()) {
                assert _outerTuple != null;
                Tuple innerTuple = _innerChild.next();
                if (_predicate.filter(_outerTuple, innerTuple)) {
                    return Tuple.merge(_cachedTd, _outerTuple, innerTuple);
                }
            }
            _innerChild.rewind();
            _outerTuple = null;
        }
    }

    @Override
    public DbIterator[] getChildren() {
        return new DbIterator[] { _outerChild, _innerChild };
    }

    @Override
    public void setChildren(DbIterator[] children) {
        if (children.length != 2)
            throw new IllegalArgumentException(
                    "Join operator should takes 2 children, got " + children.length);
        _outerChild = children[0];
        _innerChild = children[1];
    }
}
